<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="../css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <title>FILE SHARING</title>
  <style>
    body {
      font-family: "Roboto", sans-serif;
      background-color: #f1f1f1;
      margin: 0;
      padding: 0;
    }

    .action-icon {
      cursor: pointer;
      margin-right: 10px;
    }

    .action-icon.delete-icon {
      color: red;
    }

    .action-icon.change-password-icon {
      color: green;
    }

    .action-icon.edit-icon {
      color: blue;
    }

    .input-group .toggle-password {
      padding: 7px 10px;
      cursor: pointer;
      position: absolute;
      right: 0;
      top: 50%;
      transform: translateY(-50%);
    }
    .h2,h2{
            margin-top: 100px;
        }
  </style>

</head>

<body>
  {{> navbaradmin}}
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-10 col-12 mx-auto">
        <h2>Users</h2>
        <table id="usersTable" class="table table-striped">
          <thead>
            <tr>
              <th>First Name</th>
              <th>Last Name</th>
              <th>Phone Number</th>
              <th>Username</th>
              <th>Branch</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <!-- User data will be dynamically inserted here -->
          </tbody>
        </table>
        <div id="passwordForm" style="display: none;">
          <form onsubmit="changePassword(event)">
            <input type="hidden" id="changePasswordUsername" name="username">
            <div class="form-group">
              <div class="input-group">
                <input type="password" name="newPassword" id="newPasswordInput" class="form-control" required>
                <div class="toggle-password input-group-append" onclick="togglePasswordVisibility()">
                  <i class="fa fa-eye-slash"></i>
                </div>
              </div>
            <button type="submit" class="btn btn-primary">Submit</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script src="../jq/jquery.js" type="text/javascript"></script>
  <script>
    function togglePasswordVisibility() {
      const newPasswordInput = document.getElementById("newPasswordInput");
      const togglePasswordIcon = document.querySelector(".toggle-password i");

      if (newPasswordInput.type === "password") {
        newPasswordInput.type = "text";
        togglePasswordIcon.classList.remove("fa-eye-slash");
        togglePasswordIcon.classList.add("fa-eye");
      } else {
        newPasswordInput.type = "password";
        togglePasswordIcon.classList.remove("fa-eye");
        togglePasswordIcon.classList.add("fa-eye-slash");
      }
    }

    // Function to fetch users from the server and populate the table
    function fetchUsers() {
      // Send a GET request to retrieve all users
      var accessToken = document.cookie.replace(/(?:(?:^|.*;\s*)accessToken\s*=\s*([^;]*).*$)|^.*$/, "$1");

      fetch('/api/auth/users', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + accessToken // Update the access token
        }
      })
        .then(response => response.json())
        .then(users => {
          // Clear the table body
          const tableBody = document.querySelector('#usersTable tbody');
          tableBody.innerHTML = '';

          // Populate the table with user data
          users.forEach(user => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${user.firstName}</td>
              <td>${user.lastName}</td>
              <td>${user.phoneNumber}</td>
              <td>${user.username}</td>
              <td>${user.branch}</td>
              <td>
                <span class="action-icon delete-icon" onclick="deleteUser('${user.username}')">
                  <i class="fa fa-trash"></i>
                </span>
                <span class="action-icon change-password-icon" onclick="showChangePasswordForm('${user.username}', this)">
                  <i class="fa fa-key"></i>
                </span>
                <span class="action-icon edit-icon" onclick="editUser('${user.username}')">
                  <i class="fa fa-edit"></i>
                </span>
              </td>
            `;
            tableBody.appendChild(row);
          });
        })
        .catch(error => {
          console.error(error);
          alert('Failed to fetch users.');
        });
    }

    // Function to delete a user
    function deleteUser(username) {
      var accessToken = document.cookie.replace(/(?:(?:^|.*;\s*)accessToken\s*=\s*([^;]*).*$)|^.*$/, "$1");

      fetch(`/api/auth/users/${username}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + accessToken // Update the access token
        }
      })
        .then(response => {
          if (response.ok) {
            alert('User deleted successfully');
            fetchUsers();
          } else {
            throw new Error('Failed to delete user.');
          }
        })
        .catch(error => {
          console.error(error);
          alert('Failed to delete user.');
        });
    }

    // Function to show the change password form below the user's row
    function showChangePasswordForm(username, clickedElement) {
      const passwordForm = document.querySelector('#passwordForm');
      const changePasswordUsername = document.querySelector('#changePasswordUsername');
      changePasswordUsername.value = username;
      
      // Insert the password form after the clickedElement's parent row
      const targetRow = clickedElement.closest('tr');
      targetRow.parentNode.insertBefore(passwordForm, targetRow.nextSibling);
      passwordForm.style.display = 'block';
    }

    // Function to change the password of a user
    function changePassword(event) {
      event.preventDefault();

      const username = document.querySelector('#changePasswordUsername').value;
      const newPassword = event.target.newPassword.value;

      var accessToken = document.cookie.replace(/(?:(?:^|.*;\s*)accessToken\s*=\s*([^;]*).*$)|^.*$/, "$1");

      fetch('/api/auth/reset-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + accessToken // Update the access token
        },
        body: JSON.stringify({ username, newPassword })
      })
        .then(response => {
          if (response.ok) {
            alert('Password changed successfully');
            hideChangePasswordForm();
          } else {
            return response.json().then(data => {
              throw new Error(data.error);
            });
          }
        })
        .catch(error => {
          console.error(error);
          const errorMessage = error.message || 'Failed to change password';
          alert(errorMessage);
        });
    }

    // Function to hide the change password form
    function hideChangePasswordForm() {
      const form = document.querySelector('#passwordForm form');
      form.reset();
      const passwordForm = document.querySelector('#passwordForm');
      passwordForm.style.display = 'none';
    }

    // Function to edit a user
    function editUser(username) {
      console.log(`Edit user with username: ${username}`);
    }

    // Call the fetchUsers function when the page is loaded
    document.addEventListener('DOMContentLoaded', fetchUsers);
  </script>
</body>

</html>
