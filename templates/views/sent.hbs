<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="../css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    integrity="sha512-RElG/AxZ6DUCYo6/F4yAAQMsun25lgnvKy/Z7wDkZr2Oktj2oo47a8IxNynBl7Qs0L5uNGvWYqJgsSTWjW7vwQ=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <title>FILE SHARING</title>
  <style>
    body {
      font-family: "Roboto", sans-serif;
      background-color: #f1f1f1;
      margin: 0;
      padding: 0;
    }

    #messagesTable tbody tr {
      cursor: pointer;
    }

    .modal {
      margin-top: 70px;
    }
    .h2,h2{
      margin-top: 100px;
    }
  </style>
</head>

<body>
  <!-- Navbar -->
  {{>navbar}}
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-10 col-12 mx-auto">
        <h2>Sent Messages</h2>
        <table id="messagesTable" class="table table-striped">
          <thead>
            <tr>
              <th>Date</th>
              <th>Receivers</th>
              <th>Subject</th>
              <th>Attachments</th>
            </tr>
          </thead>
          <tbody>
            <!-- Message data will be dynamically inserted here -->
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Message Modal -->
  <div class="modal" id="messageModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title"></h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body"></div>
      </div>
    </div>
  </div>

  <script src="../jq/jquery.js" type="text/javascript"></script>

  <script>
    // Function to fetch all messages from the server and populate the table
    function fetchMessages() {
      // Get the access token from the cookie
      var accessToken = document.cookie.replace(/(?:(?:^|.*;\s*)accessToken\s*=\s*([^;]*).*$)|^.*$/, "$1");

      // Send a GET request to retrieve all messages
      fetch('/api/messages/outbox', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + accessToken // Replace with the actual access token
          }
        })
        .then(response => response.json())
        .then(messages => {

          // Sort messages by date in descending order
          messages.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

          // Clear the table body
          const tableBody = document.querySelector('#messagesTable tbody');
          tableBody.innerHTML = '';

          // Populate the table with message data
          messages.forEach(message => {
            const row = document.createElement('tr');
            const receivers = message.receivers.join(', ');
            const attachments = getAttachmentDetails(message.attachments);

            row.innerHTML = `
              <td>${new Date(message.createdAt).toLocaleString()}</td>
              <td>${message.receivers}</td>
              <td>${message.subject}</td>
              <td>${attachments}</td>
            `;

            row.addEventListener('click', () => {
              openMessageWindow(message);
            });

            tableBody.appendChild(row);
          });
        })
        .catch(error => {
          console.error(error);
          alert('Failed to fetch messages.');
        });
    }

    // Function to get attachment details with icons and short names
    function getAttachmentDetails(attachments) {
      const MAX_ATTACHMENTS = 2;

      if (attachments.length <= MAX_ATTACHMENTS) {
        return attachments
          .map(attachment => {
            const filename = attachment.filename;
            const extension = filename.split('.').pop().toLowerCase();
            let shortName = filename.split(' ').slice(0, 2).join(' ');
            let iconURL = getIconURL(extension);

            return `<img src="${iconURL}" alt="${extension.toUpperCase()}"> ${shortName}`;
          })
          .join('<br>');
      } else {
        const firstTwoAttachments = attachments.slice(0, MAX_ATTACHMENTS);
        const remainingCount = attachments.length - MAX_ATTACHMENTS;
        const firstTwoDetails = firstTwoAttachments
          .map(attachment => {
            const filename = attachment.filename;
            const extension = filename.split('.').pop().toLowerCase();
            let shortName = filename.split(' ').slice(0, 2).join(' ');
            let iconURL = getIconURL(extension);

            return `<img src="${iconURL}" alt="${extension.toUpperCase()}"> ${shortName}`;
          })
          .join('<br>');

        return `${firstTwoDetails} + ${remainingCount} more`;
      }
    }

    // Function to get the icon URL based on the file extension
    function getIconURL(extension) {
      // Add more file extensions and their corresponding icon URLs as needed
      const iconURLs = {
        pdf: 'https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_pdf_x16.png',
        png: 'https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_image_x16.png',
        jpg: 'https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_image_x16.png',
        jpeg: 'https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_image_x16.png',
        docx: 'https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_word_x16.png',
        mp4: 'https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_video_x16.png',
        gif: 'https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_gif_x16.png',
        doc: 'https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_word_x16.png',
        wp: 'https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_word_x16.png',
        txt: 'https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_text_x16.png',
        rtf: 'https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_rtf_x16.png',
        html: 'https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_html_x16.png',
        ppt: 'https://ssl.gstatic.com/docs/doclist/images/icon_8_presentation_list.png',
         xlsx: 'https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_excel_x16.png',
        // Add more file extensions and their corresponding icon URLs here
      };

      // Check if the file extension exists in the iconURLs object
      if (extension in iconURLs) {
        return iconURLs[extension];
      }

      // If the file extension is not found, use a generic icon URL
      return 'https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_generic_x16.png';
    }

    // Function to open the message in a modal
    function openMessageWindow(message) {
      const modal = document.getElementById('messageModal');
      const modalTitle = modal.querySelector('.modal-title');
      const modalBody = modal.querySelector('.modal-body');

      // Populate the modal with message data
      modalTitle.innerText = message.subject || ''; // Add a default empty string if subject is undefined
      modalBody.innerHTML = `
        <p><strong>Date:</strong> ${new Date(message.createdAt).toLocaleString()}</p> 
        <p><strong>Sender:</strong> ${message.sender}</p>
        <p><strong>Receivers:</strong> ${message.receivers.join(', ')}</p>
        <p><strong>Body:</strong></p>
        <p>${message.body}</p>
        <p><strong>Attachments:</strong></p>
        <ul>
          ${message.attachments
            .map(attachment => {
              const extension = attachment.filename.split('.').pop().toLowerCase();
              const iconURL = getIconURL(extension);
              return `<li><img src="${iconURL}" alt="${extension.toUpperCase()}"> <a href="${attachment.downloadLink}" target="_blank">${attachment.filename}</a></li>`;
            })
            .join('')}
        </ul>
      `;

      // Show the modal
      modal.classList.add('show');
      modal.style.display = 'block';
    }

    // Call the fetchMessages function when the page is loaded
    document.addEventListener('DOMContentLoaded', function () {
      fetchMessages();

      // Attach click event listener to table rows
      const tableBody = document.querySelector('#messagesTable tbody');
      tableBody.addEventListener('click', function (event) {
        const row = event.target.closest('tr');
        if (row) {
          const rowIndex = Array.from(tableBody.children).indexOf(row);
          const messages = Array.from(tableBody.children);
          const message = messages[rowIndex].__data__;
          openMessageWindow(message);
        }
      });

      // Attach click event listener to close button of the modal
      const closeButton = document.querySelector('.modal [data-dismiss="modal"]');
      closeButton.addEventListener('click', function () {
        const modal = document.getElementById('messageModal');
        modal.classList.remove('show');
        modal.style.display = 'none';
      });
    });
  </script>
</body>

</html>
